package com.example.mc_assignment3

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.mc_assignment3.ui.navigation.AppNavigation
import com.example.mc_assignment3.ui.theme.MC_Assignment3Theme
import com.example.mc_assignment3.ui.viewmodels.SettingsViewModel
import com.example.mc_assignment3.ui.viewmodels.ViewModelFactory

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        setContent {
            // Get theme preference from SettingsViewModel
            val settingsViewModel: SettingsViewModel = viewModel(factory = ViewModelFactory(this))
            val isDarkMode by settingsViewModel.isDarkMode.collectAsState()

            MC_Assignment3Theme(
                darkTheme = isDarkMode,
                // Use dynamic colors only when not in dark mode (optional)
                dynamicColor = !isDarkMode && isSystemInDarkTheme()
            ) {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    AppNavigation()
                }
            }
        }
    }
}


package com.example.mc_assignment3.ui.components

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.FavoriteBorder
import androidx.compose.material.icons.filled.LocationOn
import androidx.compose.material.icons.outlined.Info
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ElevatedCard
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage
import com.example.mc_assignment3.data.model.WikipediaArticle

/**
 * A card component for displaying a Wikipedia article.
 *
 * @param article The Wikipedia article to display
 * @param onClick Callback when the card is clicked
 * @param onFavoriteToggle Callback when the favorite icon is toggled
 */
@Composable
fun ArticleCard(
    article: WikipediaArticle,
    onClick: () -> Unit,
    onFavoriteToggle: () -> Unit = {},
    modifier: Modifier = Modifier
) {
    ElevatedCard(
        modifier = modifier
            .fillMaxWidth()
            .clickable(onClick = onClick)
            .padding(vertical = 4.dp),
        elevation = CardDefaults.elevatedCardElevation(defaultElevation = 2.dp),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.elevatedCardColors(
            containerColor = MaterialTheme.colorScheme.surface
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Article thumbnail
                article.thumbnail?.let { thumbnailUrl ->
                    Surface(
                        modifier = Modifier.size(80.dp),
                        shape = RoundedCornerShape(12.dp),
                        tonalElevation = 4.dp,
                        shadowElevation = 2.dp
                    ) {
                        AsyncImage(
                            model = thumbnailUrl,
                            contentDescription = "Article thumbnail",
                            modifier = Modifier.fillMaxWidth(),
                            contentScale = ContentScale.Crop
                        )
                    }
                } ?: run {
                    // Placeholder when no thumbnail is available
                    Surface(
                        modifier = Modifier.size(80.dp),
                        shape = RoundedCornerShape(12.dp),
                        color = MaterialTheme.colorScheme.secondaryContainer,
                        tonalElevation = 4.dp
                    ) {
                        Box(
                            contentAlignment = Alignment.Center
                        ) {
                            Icon(
                                imageVector = Icons.Outlined.Info,
                                contentDescription = null,
                                tint = MaterialTheme.colorScheme.onSecondaryContainer,
                                modifier = Modifier.size(32.dp)
                            )
                        }
                    }
                }

                Spacer(modifier = Modifier.width(16.dp))

                // Article content
                Column(
                    modifier = Modifier.weight(1f)
                ) {
                    Text(
                        text = article.title,
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.onSurface,
                        maxLines = 2,
                        overflow = TextOverflow.Ellipsis
                    )

                    Spacer(modifier = Modifier.height(4.dp))

                    Text(
                        text = article.extract,
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                        maxLines = 2,
                        overflow = TextOverflow.Ellipsis
                    )

                    // Location info if available
                    article.coordinates?.let {
                        Spacer(modifier = Modifier.height(4.dp))
                        Surface(
                            shape = RoundedCornerShape(50),
                            color = MaterialTheme.colorScheme.secondaryContainer,
                            modifier = Modifier.padding(top = 4.dp)
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                modifier = Modifier.padding(horizontal = 8.dp, vertical = 2.dp)
                            ) {
                                Icon(
                                    imageVector = Icons.Default.LocationOn,
                                    contentDescription = null,
                                    modifier = Modifier.size(16.dp),
                                    tint = MaterialTheme.colorScheme.onSecondaryContainer
                                )
                                Spacer(modifier = Modifier.width(4.dp))
                                Text(
                                    text = "Nearby location",
                                    style = MaterialTheme.typography.labelSmall,
                                    color = MaterialTheme.colorScheme.onSecondaryContainer
                                )
                            }
                        }
                    }
                }

                // Favorite icon
                IconButton(
                    onClick = onFavoriteToggle,
                    modifier = Modifier
                        .padding(start = 8.dp)
                        .size(40.dp)
                ) {
                    Surface(
                        shape = CircleShape,
                        color = if (article.isFavorite)
                            MaterialTheme.colorScheme.primary.copy(alpha = 0.15f)
                        else
                            MaterialTheme.colorScheme.surface
                    ) {
                        Icon(
                            imageVector = if (article.isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,
                            contentDescription = if (article.isFavorite) "Remove from favorites" else "Add to favorites",
                            tint = if (article.isFavorite) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant,
                            modifier = Modifier
                                .padding(8.dp)
                                .size(24.dp)
                        )
                    }
                }
            }

            // Show AI summary badge if available
            article.aiSummary?.let {
                Spacer(modifier = Modifier.height(8.dp))
                Surface(
                    shape = RoundedCornerShape(50),
                    color = MaterialTheme.colorScheme.primaryContainer,
                    modifier = Modifier.padding(top = 4.dp)
                ) {
                    Text(
                        text = "AI Summary available",
                        style = MaterialTheme.typography.labelSmall,
                        color = MaterialTheme.colorScheme.onPrimaryContainer,
                        modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)
                    )
                }
            }
        }
    }
}


package com.example.mc_assignment3.ui.components

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.example.mc_assignment3.R

/**
 * A dialog that requests location permission from the user.
 *
 * @param onDismiss Called when the user dismisses the dialog (by clicking "Not Now")
 * @param onGrantPermission Called when the user wants to grant the permission
 */
@Composable
fun LocationPermissionDialog(
    onDismiss: () -> Unit,
    onGrantPermission: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        title = {
            Text(
                text = stringResource(R.string.location_permission_title),
                style = MaterialTheme.typography.headlineSmall
            )
        },
        text = {
            Column(
                modifier = Modifier.fillMaxWidth(),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = stringResource(R.string.location_permission_message),
                    style = MaterialTheme.typography.bodyLarge,
                    textAlign = TextAlign.Center
                )

                Spacer(modifier = Modifier.height(16.dp))
            }
        },
        confirmButton = {
            Button(
                onClick = onGrantPermission,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp)
            ) {
                Text(text = stringResource(R.string.grant_permission))
            }
        },
        dismissButton = {
            OutlinedButton(
                onClick = onDismiss,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp)
            ) {
                Text(text = stringResource(R.string.deny_permission))
            }
        }
    )
}


package com.example.mc_assignment3.ui.components

import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Clear
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.unit.dp

/**
 * A search bar component for searching Wikipedia articles.
 *
 * @param query The current search query
 * @param onQueryChange Callback when the query changes
 * @param onSearch Callback when the search action is triggered
 * @param modifier Modifier for the component
 */
@Composable
fun SearchBar(
    query: String,
    onQueryChange: (String) -> Unit,
    onSearch: () -> Unit,
    modifier: Modifier = Modifier
) {
    val focusManager = LocalFocusManager.current

    OutlinedTextField(
        value = query,
        onValueChange = onQueryChange,
        modifier = modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp)
            .shadow(4.dp),
        placeholder = { Text("Search Wikipedia...") },
        leadingIcon = {
            Icon(
                imageVector = Icons.Default.Search,
                contentDescription = "Search"
            )
        },
        trailingIcon = {
            if (query.isNotEmpty()) {
                IconButton(onClick = { onQueryChange("") }) {
                    Icon(
                        imageVector = Icons.Default.Clear,
                        contentDescription = "Clear search"
                    )
                }
            }
        },
        singleLine = true,
        keyboardOptions = KeyboardOptions.Default.copy(
            imeAction = ImeAction.Search
        ),
        keyboardActions = KeyboardActions(
            onSearch = {
                onSearch()
                focusManager.clearFocus()
            }
        )
    )
}


package com.example.mc_assignment3.ui.navigation

import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.navigation.NavHostController
import androidx.navigation.NavType
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.navigation.navArgument
import com.example.mc_assignment3.ui.screens.ArticleDetailScreen
import com.example.mc_assignment3.ui.screens.FavoritesScreen
import com.example.mc_assignment3.ui.screens.HomeScreen
import com.example.mc_assignment3.ui.screens.NearbyArticlesScreen
import com.example.mc_assignment3.ui.screens.SearchScreen
import com.example.mc_assignment3.ui.screens.SettingsScreen

/**
 * Navigation routes for the app.
 */
object Routes {
    const val HOME = "home"
    const val SEARCH = "search"
    const val ARTICLE_DETAIL = "article/{articleId}"
    const val FAVORITES = "favorites"
    const val SETTINGS = "settings"
    const val NEARBY_ARTICLES = "nearby"

    // Helper function to create article detail route with ID
    fun articleDetail(articleId: Int) = "article/$articleId"
}

/**
 * Main navigation component for the Wikipedia app.
 */
@Composable
fun AppNavigation(
    modifier: Modifier = Modifier,
    navController: NavHostController = rememberNavController()
) {
    NavHost(
        navController = navController,
        startDestination = Routes.HOME,
        modifier = modifier
    ) {
        composable(Routes.HOME) {
            HomeScreen(
                navigateToArticle = { articleId ->
                    navController.navigate(Routes.articleDetail(articleId))
                },
                navigateToSearch = {
                    navController.navigate(Routes.SEARCH)
                },
                navigateToFavorites = {
                    navController.navigate(Routes.FAVORITES)
                },
                navigateToSettings = {
                    navController.navigate(Routes.SETTINGS)
                },
                navigateToNearbyArticles = {
                    navController.navigate(Routes.NEARBY_ARTICLES)
                }
            )
        }

        composable(Routes.SEARCH) {
            SearchScreen(
                navigateToArticle = { articleId ->
                    navController.navigate(Routes.articleDetail(articleId))
                },
                navigateBack = {
                    navController.popBackStack()
                }
            )
        }

        composable(
            route = "article/{articleId}",
            arguments = listOf(
                navArgument("articleId") {
                    type = NavType.IntType
                }
            )
        ) { backStackEntry ->
            val articleId = backStackEntry.arguments?.getInt("articleId") ?: return@composable

            ArticleDetailScreen(
                articleId = articleId,
                navigateBack = {
                    navController.popBackStack()
                }
            )
        }

        composable(Routes.FAVORITES) {
            FavoritesScreen(
                navigateToArticle = { articleId ->
                    navController.navigate(Routes.articleDetail(articleId))
                },
                navigateBack = {
                    navController.popBackStack()
                }
            )
        }

        composable(Routes.SETTINGS) {
            SettingsScreen(
                navigateBack = {
                    navController.popBackStack()
                }
            )
        }

        composable(Routes.NEARBY_ARTICLES) {
            NearbyArticlesScreen(
                navigateToArticle = { articleId ->
                    navController.navigate(Routes.articleDetail(articleId))
                },
                navigateBack = {
                    navController.popBackStack()
                }
            )
        }
    }
}


package com.example.mc_assignment3.ui.screens

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.FavoriteBorder
import androidx.compose.material.icons.filled.LocationOn
import androidx.compose.material.icons.filled.Share
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ElevatedCard
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FilledTonalButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.LargeTopAppBar
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.nestedscroll.nestedScroll
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import coil.compose.AsyncImage
import com.example.mc_assignment3.R
import com.example.mc_assignment3.ui.viewmodels.HomeViewModel
import com.example.mc_assignment3.ui.viewmodels.ViewModelFactory

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ArticleDetailScreen(
    articleId: Int,
    navigateBack: () -> Unit,
    modifier: Modifier = Modifier,
    viewModel: HomeViewModel = viewModel(factory = ViewModelFactory(LocalContext.current))
) {
    val uiState by viewModel.uiState.collectAsState()
    val currentArticle by viewModel.currentArticle.collectAsState()
    val scrollState = rememberScrollState()
    val scrollBehavior = TopAppBarDefaults.exitUntilCollapsedScrollBehavior()
    val snackbarHostState = remember { SnackbarHostState() }

    // Fetch article when the screen is displayed
    LaunchedEffect(articleId) {
        viewModel.loadArticle(articleId)
    }

    Scaffold(
        modifier = modifier
            .fillMaxSize()
            .nestedScroll(scrollBehavior.nestedScrollConnection),
        topBar = {
            TopAppBar(
                title = { Text(currentArticle?.title ?: stringResource(R.string.detail_screen_title)) },
                navigationIcon = {
                    IconButton(onClick = navigateBack) {
                        Icon(
                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "Navigate back"
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                    navigationIconContentColor = MaterialTheme.colorScheme.onPrimaryContainer
                ),
                actions = {
                    currentArticle?.let { article ->
                        // Share button
                        IconButton(onClick = { /* Share functionality */ }) {
                            Icon(
                                imageVector = Icons.Default.Share,
                                contentDescription = "Share article",
                                tint = MaterialTheme.colorScheme.onPrimaryContainer
                            )
                        }

                        // Favorite button
                        IconButton(onClick = { viewModel.toggleFavorite(article) }) {
                            Icon(
                                imageVector = if (article.isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,
                                contentDescription = if (article.isFavorite) "Remove from favorites" else "Add to favorites",
                                tint = if (article.isFavorite) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onPrimaryContainer
                            )
                        }
                    }
                },
                scrollBehavior = scrollBehavior
            )
        },
        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },
    ) { paddingValues ->
        when (uiState) {
            is HomeViewModel.UiState.Loading -> {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(paddingValues),
                    contentAlignment = Alignment.Center
                ) {
                    CircularProgressIndicator(
                        color = MaterialTheme.colorScheme.primary
                    )
                }
            }

            is HomeViewModel.UiState.Success -> {
                currentArticle?.let { article ->
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(paddingValues)
                            .verticalScroll(scrollState)
                    ) {
                        // Article thumbnail if available
                        article.thumbnail?.let { thumbnailUrl ->
                            Box(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .height(200.dp)
                            ) {
                                AsyncImage(
                                    model = thumbnailUrl,
                                    contentDescription = "Article image",
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .height(200.dp),
                                    contentScale = ContentScale.Crop
                                )

                                // Semi-transparent overlay at the bottom for better text visibility
                                Box(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .align(Alignment.BottomCenter)
                                        .height(80.dp)
                                        .background(
                                            brush = Brush.verticalGradient(
                                                colors = listOf(
                                                    Color.Transparent,
                                                    Color.Black.copy(alpha = 0.6f)
                                                )
                                            )
                                        )
                                )
                            }
                        }

                        // Article content
                        Column(
                            modifier = Modifier.padding(16.dp)
                        ) {
                            // Article title
                            Text(
                                text = article.title,
                                style = MaterialTheme.typography.headlineMedium,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.onSurface
                            )

                            Spacer(modifier = Modifier.height(8.dp))

                            // Location info if available
                            article.coordinates?.let { coordinates ->
                                ElevatedCard(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(vertical = 8.dp),
                                    colors = CardDefaults.elevatedCardColors(
                                        containerColor = MaterialTheme.colorScheme.secondaryContainer
                                    ),
                                    elevation = CardDefaults.elevatedCardElevation(
                                        defaultElevation = 2.dp
                                    )
                                ) {
                                    Row(
                                        modifier = Modifier
                                            .fillMaxWidth()
                                            .padding(16.dp),
                                        verticalAlignment = Alignment.CenterVertically,
                                        horizontalArrangement = Arrangement.spacedBy(12.dp)
                                    ) {
                                        Icon(
                                            imageVector = Icons.Default.LocationOn,
                                            contentDescription = "Location",
                                            tint = MaterialTheme.colorScheme.onSecondaryContainer
                                        )

                                        Column {
                                            Text(
                                                text = "Geographic Coordinates",
                                                style = MaterialTheme.typography.titleSmall,
                                                color = MaterialTheme.colorScheme.onSecondaryContainer
                                            )

                                            Text(
                                                text = "Lat: ${coordinates.lat}, Long: ${coordinates.lon}",
                                                style = MaterialTheme.typography.bodyMedium,
                                                color = MaterialTheme.colorScheme.onSecondaryContainer.copy(alpha = 0.8f)
                                            )
                                        }
                                    }
                                }

                                Spacer(modifier = Modifier.height(16.dp))
                            }

                            // AI Summary card if available
                            article.aiSummary?.let { summary ->
                                AnimatedVisibility(
                                    visible = true,
                                    enter = fadeIn(animationSpec = tween(500)),
                                    exit = fadeOut(animationSpec = tween(500))
                                ) {
                                    ElevatedCard(
                                        modifier = Modifier
                                            .fillMaxWidth()
                                            .padding(vertical = 8.dp),
                                        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
                                        colors = CardDefaults.elevatedCardColors(
                                            containerColor = MaterialTheme.colorScheme.primaryContainer
                                        )
                                    ) {
                                        Column(modifier = Modifier.padding(16.dp)) {
                                            Row(
                                                verticalAlignment = Alignment.CenterVertically,
                                                modifier = Modifier.padding(bottom = 8.dp)
                                            ) {
                                                // AI Icon placeholder (you can replace with a proper AI icon)
                                                Surface(
                                                    shape = RoundedCornerShape(8.dp),
                                                    color = MaterialTheme.colorScheme.primary,
                                                    modifier = Modifier
                                                        .padding(end = 8.dp)
                                                        .size(32.dp)
                                                ) {
                                                    Text(
                                                        text = "AI",
                                                        color = MaterialTheme.colorScheme.onPrimary,
                                                        modifier = Modifier.padding(4.dp),
                                                        style = MaterialTheme.typography.labelMedium
                                                    )
                                                }

                                                Text(
                                                    text = stringResource(R.string.ai_summary),
                                                    style = MaterialTheme.typography.titleMedium,
                                                    fontWeight = FontWeight.Bold,
                                                    color = MaterialTheme.colorScheme.onPrimaryContainer
                                                )
                                            }

                                            Text(
                                                text = summary,
                                                style = MaterialTheme.typography.bodyLarge,
                                                color = MaterialTheme.colorScheme.onPrimaryContainer,
                                                modifier = Modifier.padding(vertical = 4.dp)
                                            )
                                        }
                                    }
                                }

                                Spacer(modifier = Modifier.height(16.dp))
                            }

                            // Full article content
                            Text(
                                text = "Full Article",
                                style = MaterialTheme.typography.titleLarge,
                                color = MaterialTheme.colorScheme.onSurface,
                                modifier = Modifier.padding(vertical = 8.dp)
                            )

                            Text(
                                text = article.extract,
                                style = MaterialTheme.typography.bodyLarge,
                                color = MaterialTheme.colorScheme.onSurfaceVariant,
                                modifier = Modifier.padding(bottom = 16.dp)
                            )

                            // Read on Wikipedia link
                            article.fullUrl?.let { url ->
                                OutlinedButton(
                                    onClick = { /* Open URL in browser */ },
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(vertical = 8.dp)
                                ) {
                                    Text("Read full article on Wikipedia")
                                }
                            }

                            Spacer(modifier = Modifier.height(24.dp))
                        }
                    }
                }
            }

            is HomeViewModel.UiState.Error -> {
                val errorState = uiState as HomeViewModel.UiState.Error
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(paddingValues),
                    contentAlignment = Alignment.Center
                ) {
                    ElevatedCard(
                        modifier = Modifier
                            .fillMaxWidth(0.9f)
                            .padding(16.dp),
                        colors = CardDefaults.elevatedCardColors(
                            containerColor = MaterialTheme.colorScheme.errorContainer
                        )
                    ) {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally,
                            modifier = Modifier
                                .padding(24.dp)
                                .fillMaxWidth()
                        ) {
                            Text(
                                text = "Error",
                                style = MaterialTheme.typography.titleLarge,
                                color = MaterialTheme.colorScheme.onErrorContainer
                            )

                            Spacer(modifier = Modifier.height(8.dp))

                            Text(
                                text = errorState.message,
                                style = MaterialTheme.typography.bodyLarge,
                                textAlign = TextAlign.Center,
                                color = MaterialTheme.colorScheme.onErrorContainer,
                                modifier = Modifier.padding(16.dp)
                            )

                            Spacer(modifier = Modifier.height(8.dp))

                            FilledTonalButton(onClick = { viewModel.loadArticle(articleId) }) {
                                Text("Try Again")
                            }
                        }
                    }
                }
            }

            else -> {
                // Handle other states
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(paddingValues),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = "Loading article...",
                        style = MaterialTheme.typography.bodyLarge,
                        textAlign = TextAlign.Center
                    )
                }
            }
        }
    }
}


package com.example.mc_assignment3.ui.screens

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.mc_assignment3.ui.components.ArticleCard
import com.example.mc_assignment3.ui.viewmodels.HomeViewModel
import com.example.mc_assignment3.ui.viewmodels.ViewModelFactory

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FavoritesScreen(
    navigateToArticle: (Int) -> Unit,
    navigateBack: () -> Unit,
    modifier: Modifier = Modifier,
    viewModel: HomeViewModel = viewModel(factory = ViewModelFactory(androidx.compose.ui.platform.LocalContext.current))
) {
    val favoriteArticles by viewModel.favoriteArticles.collectAsState()

    // Load favorite articles when the screen is displayed
    LaunchedEffect(Unit) {
        viewModel.loadFavoriteArticles()
    }

    Scaffold(
        modifier = modifier.fillMaxSize(),
        topBar = {
            TopAppBar(
                title = { Text("Favorite Articles") },
                navigationIcon = {
                    IconButton(onClick = navigateBack) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Navigate back"
                        )
                    }
                }
            )
        }
    ) { paddingValues ->
        if (favoriteArticles.isEmpty()) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = "You haven't saved any favorites yet.\nArticles you mark as favorites will appear here.",
                    style = MaterialTheme.typography.bodyLarge,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.padding(32.dp)
                )
            }
        } else {
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues)
                    .padding(horizontal = 16.dp)
            ) {
                items(favoriteArticles) { article ->
                    ArticleCard(
                        article = article,
                        onClick = { navigateToArticle(article.pageid) },
                        onFavoriteToggle = { viewModel.toggleFavorite(article) }
                    )
                }

                // Add some bottom padding
                item {
                    Spacer(modifier = Modifier.height(32.dp))
                }
            }
        }
    }
}


package com.example.mc_assignment3.ui.screens

import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.expandVertically
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.shrinkVertically
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.LocationOn
import androidx.compose.material.icons.filled.Search
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material.icons.rounded.LocationOn
import androidx.compose.material.icons.rounded.Search
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CenterAlignedTopAppBar
import androidx.compose.material3.ElevatedCard
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.NavigationBar
import androidx.compose.material3.NavigationBarItem
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarDuration
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.input.nestedscroll.nestedScroll
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.core.app.ActivityCompat
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.mc_assignment3.R
import com.example.mc_assignment3.ui.components.ArticleCard
import com.example.mc_assignment3.ui.components.LocationPermissionDialog
import com.example.mc_assignment3.ui.components.SearchBar
import com.example.mc_assignment3.ui.viewmodels.HomeViewModel
import com.example.mc_assignment3.ui.viewmodels.ViewModelFactory
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(
    navigateToArticle: (Int) -> Unit,
    navigateToSearch: () -> Unit,
    navigateToFavorites: () -> Unit,
    navigateToSettings: () -> Unit,
    navigateToNearbyArticles: () -> Unit,
    modifier: Modifier = Modifier,
    viewModel: HomeViewModel = viewModel(factory = ViewModelFactory(LocalContext.current))
) {
    // Collect state from ViewModel
    val recentArticles by viewModel.recentArticles.collectAsState()
    val nearbyArticles by viewModel.nearbyArticles.collectAsState()
    val showPermissionDialog by viewModel.showLocationPermissionDialog.collectAsState()
    val permissionResultMessage by viewModel.permissionResultMessage.collectAsState()

    // UI state
    val snackbarHostState = remember { SnackbarHostState() }
    val coroutineScope = rememberCoroutineScope()
    val scrollBehavior = TopAppBarDefaults.pinnedScrollBehavior()
    var selectedTab by remember { mutableIntStateOf(0) }
    val lazyListState = rememberLazyListState()

    // Context for permissions
    val context = LocalContext.current

    // Permission launcher
    val requestPermissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestMultiplePermissions()
    ) { permissions ->
        val areAllGranted = permissions.values.all { it }
        viewModel.handleLocationPermissionResult(areAllGranted)
    }

    // Handle permission result message
    LaunchedEffect(permissionResultMessage) {
        permissionResultMessage?.let {
            snackbarHostState.showSnackbar(
                message = it,
                duration = SnackbarDuration.Short
            )
            viewModel.clearPermissionResultMessage()
        }
    }

    // Load initial data
    LaunchedEffect(Unit) {
        viewModel.loadRecentArticles()
    }

    // Show location permission dialog
    if (showPermissionDialog) {
        LocationPermissionDialog(
            onDismiss = { viewModel.dismissLocationPermissionDialog() },
            onGrantPermission = {
                viewModel.requestLocationPermission()
                requestPermissionLauncher.launch(
                    arrayOf(
                        android.Manifest.permission.ACCESS_FINE_LOCATION,
                        android.Manifest.permission.ACCESS_COARSE_LOCATION
                    )
                )
            }
        )
    }

    Scaffold(
        modifier = modifier
            .fillMaxSize()
            .nestedScroll(scrollBehavior.nestedScrollConnection),
        topBar = {
            CenterAlignedTopAppBar(
                title = { Text(stringResource(R.string.home_screen_title)) },
                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer
                ),
                scrollBehavior = scrollBehavior,
                actions = {
                    IconButton(onClick = navigateToSettings) {
                        Icon(
                            imageVector = Icons.Default.Settings,
                            contentDescription = "Settings"
                        )
                    }
                }
            )
        },
        bottomBar = {
            NavigationBar {
                NavigationBarItem(
                    selected = selectedTab == 0,
                    onClick = { selectedTab = 0 },
                    icon = {
                        Icon(
                            imageVector = Icons.Rounded.Search,
                            contentDescription = "Discover"
                        )
                    },
                    label = { Text("Discover") }
                )
                NavigationBarItem(
                    selected = selectedTab == 1,
                    onClick = {
                        selectedTab = 1
                        navigateToFavorites()
                    },
                    icon = {
                        Icon(
                            imageVector = Icons.Default.Favorite,
                            contentDescription = "Favorites"
                        )
                    },
                    label = { Text("Favorites") }
                )
                NavigationBarItem(
                    selected = selectedTab == 2,
                    onClick = {
                        selectedTab = 2
                        navigateToNearbyArticles()
                    },
                    icon = {
                        Icon(
                            imageVector = Icons.Rounded.LocationOn,
                            contentDescription = "Nearby"
                        )
                    },
                    label = { Text("Nearby") }
                )
            }
        },
        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },
        floatingActionButton = {
            FloatingActionButton(
                onClick = navigateToSearch,
                containerColor = MaterialTheme.colorScheme.primaryContainer
            ) {
                Icon(
                    imageVector = Icons.Default.Search,
                    contentDescription = "Search"
                )
            }
        }
    ) { paddingValues ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues),
            state = lazyListState,
            contentPadding = PaddingValues(bottom = 16.dp)
        ) {
            // Recent articles section
            item {
                Text(
                    text = stringResource(R.string.recent_articles),
                    style = MaterialTheme.typography.headlineSmall,
                    modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp)
                )
            }

            if (recentArticles.isEmpty()) {
                item {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.surfaceVariant
                        )
                    ) {
                        Text(
                            text = "No recent articles. Try searching for something!",
                            textAlign = TextAlign.Center,
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(24.dp)
                        )
                    }
                }
            } else {
                items(recentArticles.take(3)) { article ->
                    ArticleCard(
                        article = article,
                        onClick = { navigateToArticle(article.pageid) },
                        onFavoriteToggle = { viewModel.toggleFavorite(article) },
                        modifier = Modifier.padding(horizontal = 16.dp, vertical = 4.dp)
                    )
                }

                if (recentArticles.size > 3) {
                    item {
                        Box(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(horizontal = 16.dp),
                            contentAlignment = Alignment.Center
                        ) {
                            androidx.compose.material3.TextButton(onClick = navigateToSearch) {
                                Text("View more articles")
                            }
                        }
                    }
                }
            }

            // Nearby articles section
            item {
                Spacer(modifier = Modifier.height(16.dp))
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.padding(horizontal = 16.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.LocationOn,
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.primary
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = stringResource(R.string.nearby_articles),
                        style = MaterialTheme.typography.headlineSmall
                    )
                }
                Spacer(modifier = Modifier.height(8.dp))
            }

            if (!viewModel.hasLocationPermission()) {
                item {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.surfaceVariant
                        )
                    ) {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally,
                            modifier = Modifier.padding(16.dp)
                        ) {
                            Text(
                                text = "Enable location to see articles near you",
                                textAlign = TextAlign.Center,
                                style = MaterialTheme.typography.bodyLarge,
                                modifier = Modifier.padding(8.dp)
                            )

                            Spacer(modifier = Modifier.height(8.dp))

                            androidx.compose.material3.Button(
                                onClick = {
                                    requestPermissionLauncher.launch(
                                        arrayOf(
                                            android.Manifest.permission.ACCESS_FINE_LOCATION,
                                            android.Manifest.permission.ACCESS_COARSE_LOCATION
                                        )
                                    )
                                }
                            ) {
                                Text(stringResource(R.string.enable_location))
                            }
                        }
                    }
                }
            } else if (nearbyArticles.isEmpty()) {
                item {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.surfaceVariant
                        )
                    ) {
                        Text(
                            text = "Loading nearby articles...",
                            textAlign = TextAlign.Center,
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(24.dp)
                        )
                    }
                }
            } else {
                items(nearbyArticles.take(5)) { article ->
                    ArticleCard(
                        article = article,
                        onClick = { navigateToArticle(article.pageid) },
                        onFavoriteToggle = { viewModel.toggleFavorite(article) },
                        modifier = Modifier.padding(horizontal = 16.dp, vertical = 4.dp)
                    )
                }

                if (nearbyArticles.size > 5) {
                    item {
                        Box(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(horizontal = 16.dp),
                            contentAlignment = Alignment.Center
                        ) {
                            androidx.compose.material3.TextButton(
                                onClick = navigateToNearbyArticles
                            ) {
                                Text("View more nearby articles")
                            }
                        }
                    }
                }
            }
        }
    }
}


package com.example.mc_assignment3.ui.screens

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.LocationOn
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CenterAlignedTopAppBar
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.mc_assignment3.R
import com.example.mc_assignment3.ui.components.ArticleCard
import com.example.mc_assignment3.ui.viewmodels.HomeViewModel
import com.example.mc_assignment3.ui.viewmodels.ViewModelFactory
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NearbyArticlesScreen(
    navigateToArticle: (Int) -> Unit,
    navigateBack: () -> Unit,
    modifier: Modifier = Modifier,
    viewModel: HomeViewModel = viewModel(factory = ViewModelFactory(LocalContext.current))
) {
    // State
    val nearbyArticles by viewModel.nearbyArticles.collectAsState()
    val snackbarHostState = remember { SnackbarHostState() }
    val coroutineScope = rememberCoroutineScope()
    val lazyListState = rememberLazyListState()

    // Load nearby articles when screen is shown
    LaunchedEffect(Unit) {
        viewModel.loadNearbyArticles()
    }

    Scaffold(
        topBar = {
            CenterAlignedTopAppBar(
                title = {
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Icon(
                            imageVector = Icons.Default.LocationOn,
                            contentDescription = null,
                            tint = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.padding(end = 8.dp)
                        )
                        Text(text = stringResource(R.string.nearby_articles))
                    }
                },
                navigationIcon = {
                    IconButton(onClick = navigateBack) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Navigate back"
                        )
                    }
                },
                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer
                )
            )
        },
        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },
        floatingActionButton = {
            FloatingActionButton(
                onClick = {
                    viewModel.loadNearbyArticles()
                    coroutineScope.launch {
                        snackbarHostState.showSnackbar("Refreshing nearby articles...")
                    }
                },
                containerColor = MaterialTheme.colorScheme.primaryContainer
            ) {
                Icon(
                    imageVector = Icons.Default.Refresh,
                    contentDescription = "Refresh nearby articles"
                )
            }
        },
        modifier = modifier.fillMaxSize()
    ) { paddingValues ->
        LazyColumn(
            state = lazyListState,
            contentPadding = PaddingValues(bottom = 88.dp),
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            item {
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "Discover articles around your current location",
                    style = MaterialTheme.typography.bodyLarge,
                    textAlign = TextAlign.Center,
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 16.dp, vertical = 8.dp)
                )
                Spacer(modifier = Modifier.height(8.dp))
            }

            if (!viewModel.hasLocationPermission()) {
                item {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.surfaceVariant
                        )
                    ) {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally,
                            modifier = Modifier.padding(16.dp)
                        ) {
                            Text(
                                text = "Location access is required to see articles near you",
                                textAlign = TextAlign.Center,
                                style = MaterialTheme.typography.bodyLarge,
                                modifier = Modifier.padding(8.dp)
                            )

                            Spacer(modifier = Modifier.height(8.dp))
                        }
                    }
                }
            } else if (nearbyArticles.isEmpty()) {
                item {
                    Box(
                        contentAlignment = Alignment.Center,
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(200.dp)
                    ) {
                        Column(horizontalAlignment = Alignment.CenterHorizontally) {
                            CircularProgressIndicator()
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = "Searching for articles near you...",
                                style = MaterialTheme.typography.bodyLarge
                            )
                        }
                    }
                }
            } else {
                items(nearbyArticles) { article ->
                    ArticleCard(
                        article = article,
                        onClick = { navigateToArticle(article.pageid) },
                        onFavoriteToggle = { viewModel.toggleFavorite(article) },
                        modifier = Modifier.padding(horizontal = 16.dp, vertical = 4.dp)
                    )
                }
            }
        }
    }
}


package com.example.mc_assignment3.ui.screens

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.mc_assignment3.ui.components.ArticleCard
import com.example.mc_assignment3.ui.components.SearchBar
import com.example.mc_assignment3.ui.viewmodels.HomeViewModel
import com.example.mc_assignment3.ui.viewmodels.ViewModelFactory

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SearchScreen(
    navigateToArticle: (Int) -> Unit,
    navigateBack: () -> Unit,
    modifier: Modifier = Modifier,
    viewModel: HomeViewModel = viewModel(factory = ViewModelFactory(androidx.compose.ui.platform.LocalContext.current))
) {
    val searchQuery by viewModel.searchQuery.collectAsState()
    val searchResults by viewModel.searchResults.collectAsState()
    val uiState by viewModel.uiState.collectAsState()

    // Clear search results when navigating away
    LaunchedEffect(Unit) {
        viewModel.clearSearch()
    }

    Scaffold(
        modifier = modifier.fillMaxSize(),
        topBar = {
            TopAppBar(
                title = { Text("Search Wikipedia") },
                navigationIcon = {
                    IconButton(onClick = navigateBack) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Navigate back"
                        )
                    }
                }
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            SearchBar(
                query = searchQuery,
                onQueryChange = viewModel::onSearchQueryChange,
                onSearch = viewModel::searchArticles
            )

            // Show different UI based on the state
            when (uiState) {
                is HomeViewModel.UiState.Loading -> {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .weight(1f),
                        contentAlignment = Alignment.Center
                    ) {
                        CircularProgressIndicator()
                    }
                }

                is HomeViewModel.UiState.Success -> {
                    LazyColumn(
                        modifier = Modifier
                            .fillMaxWidth()
                            .weight(1f)
                            .padding(horizontal = 16.dp)
                    ) {
                        items(searchResults) { article ->
                            ArticleCard(
                                article = article,
                                onClick = { navigateToArticle(article.pageid) },
                                onFavoriteToggle = { viewModel.toggleFavorite(article) }
                            )
                        }

                        // Add some bottom padding
                        item {
                            Spacer(modifier = Modifier.height(32.dp))
                        }
                    }
                }

                is HomeViewModel.UiState.NoResults -> {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .weight(1f),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "No results found for \"$searchQuery\"",
                            style = MaterialTheme.typography.bodyLarge,
                            textAlign = TextAlign.Center,
                            modifier = Modifier.padding(16.dp)
                        )
                    }
                }

                is HomeViewModel.UiState.Error -> {
                    val errorState = uiState as HomeViewModel.UiState.Error
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .weight(1f),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "Error: ${errorState.message}",
                            style = MaterialTheme.typography.bodyLarge,
                            textAlign = TextAlign.Center,
                            color = MaterialTheme.colorScheme.error,
                            modifier = Modifier.padding(16.dp)
                        )
                    }
                }

                else -> {
                    // Initial state or any other state
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .weight(1f),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "Search for Wikipedia articles",
                            style = MaterialTheme.typography.bodyLarge,
                            textAlign = TextAlign.Center,
                            modifier = Modifier.padding(16.dp)
                        )
                    }
                }
            }
        }
    }
}


package com.example.mc_assignment3.ui.screens

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Switch
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.mc_assignment3.ui.viewmodels.SettingsViewModel
import com.example.mc_assignment3.ui.viewmodels.ViewModelFactory

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsScreen(
    navigateBack: () -> Unit,
    modifier: Modifier = Modifier,
    viewModel: SettingsViewModel = viewModel(factory = ViewModelFactory(androidx.compose.ui.platform.LocalContext.current))
) {
    val isDarkMode by viewModel.isDarkMode.collectAsState()

    Scaffold(
        modifier = modifier.fillMaxSize(),
        topBar = {
            TopAppBar(
                title = { Text("Settings") },
                navigationIcon = {
                    IconButton(onClick = navigateBack) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Navigate back"
                        )
                    }
                }
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp)
        ) {
            Text(
                text = "Appearance",
                style = MaterialTheme.typography.titleLarge,
                color = MaterialTheme.colorScheme.primary
            )

            Spacer(modifier = Modifier.height(16.dp))

            SettingsItem(
                title = "Dark Theme",
                description = "Use dark theme for the app",
                trailingContent = {
                    Switch(
                        checked = isDarkMode,
                        onCheckedChange = { viewModel.setDarkMode(it) }
                    )
                }
            )

            Spacer(modifier = Modifier.height(24.dp))

            Text(
                text = "About",
                style = MaterialTheme.typography.titleLarge,
                color = MaterialTheme.colorScheme.primary
            )

            Spacer(modifier = Modifier.height(16.dp))

            Text(
                text = "Wikipedia Explorer",
                style = MaterialTheme.typography.bodyLarge,
                color = MaterialTheme.colorScheme.onSurface
            )

            Text(
                text = "Version 1.0",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "This app allows you to browse and search Wikipedia articles, save favorites, and get location-based suggestions. It also provides AI-powered article summaries.",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

@Composable
fun SettingsItem(
    title: String,
    description: String,
    modifier: Modifier = Modifier,
    trailingContent: @Composable () -> Unit
) {
    Column(
        modifier = modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp)
    ) {
        androidx.compose.foundation.layout.Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.titleMedium,
                    color = MaterialTheme.colorScheme.onSurface
                )

                Text(
                    text = description,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }

            trailingContent()
        }
    }
}


package com.example.mc_assignment3.ui.viewmodels

import android.location.Location
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.mc_assignment3.data.model.WikipediaArticle
import com.example.mc_assignment3.data.repository.WikipediaRepository
import com.example.mc_assignment3.util.LocationService
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch

/**
 * ViewModel for the Home Screen, handling search, article browsing, and article suggestions.
 */
class HomeViewModel(
    private val repository: WikipediaRepository,
    private val locationService: LocationService
) : ViewModel() {

    // UI state
    private val _uiState = MutableStateFlow<UiState>(UiState.Initial)
    val uiState: StateFlow<UiState> = _uiState.asStateFlow()

    // Search query
    private val _searchQuery = MutableStateFlow("")
    val searchQuery: StateFlow<String> = _searchQuery.asStateFlow()

    // Search results
    private val _searchResults = MutableStateFlow<List<WikipediaArticle>>(emptyList())
    val searchResults: StateFlow<List<WikipediaArticle>> = _searchResults.asStateFlow()

    // Recent articles
    private val _recentArticles = MutableStateFlow<List<WikipediaArticle>>(emptyList())
    val recentArticles: StateFlow<List<WikipediaArticle>> = _recentArticles.asStateFlow()

    // Location-based articles
    private val _nearbyArticles = MutableStateFlow<List<WikipediaArticle>>(emptyList())
    val nearbyArticles: StateFlow<List<WikipediaArticle>> = _nearbyArticles.asStateFlow()

    // Current article
    private val _currentArticle = MutableStateFlow<WikipediaArticle?>(null)
    val currentArticle: StateFlow<WikipediaArticle?> = _currentArticle.asStateFlow()

    // Favorite articles
    private val _favoriteArticles = MutableStateFlow<List<WikipediaArticle>>(emptyList())
    val favoriteArticles: StateFlow<List<WikipediaArticle>> = _favoriteArticles.asStateFlow()

    // Location permission state
    private val _showLocationPermissionDialog = MutableStateFlow(false)
    val showLocationPermissionDialog: StateFlow<Boolean> = _showLocationPermissionDialog.asStateFlow()

    // Location permission result message
    private val _permissionResultMessage = MutableStateFlow<String?>(null)
    val permissionResultMessage: StateFlow<String?> = _permissionResultMessage.asStateFlow()

    init {
        // Load recent articles on initialization
        loadRecentArticles()

        // Load favorite articles
        loadFavoriteArticles()

        // Check location permission and show dialog if needed
        checkLocationPermission()

        // Cleanup old cached articles
        viewModelScope.launch {
            repository.cleanupOldArticles()
        }
    }

    /**
     * Check if the app has location permissions and show dialog if needed
     */
    private fun checkLocationPermission() {
        if (!locationService.hasLocationPermission()) {
            _showLocationPermissionDialog.value = true
        } else {
            loadNearbyArticles()
        }
    }

    /**
     * Request location permission
     */
    fun requestLocationPermission() {
        _showLocationPermissionDialog.value = false
        // The actual permission request will be handled by the UI layer
    }

    /**
     * Dismiss location permission dialog
     */
    fun dismissLocationPermissionDialog() {
        _showLocationPermissionDialog.value = false
        _permissionResultMessage.value = "You won't see location-based articles without permission"
    }

    /**
     * Handle location permission result
     */
    fun handleLocationPermissionResult(isGranted: Boolean) {
        if (isGranted) {
            _permissionResultMessage.value = "Now you'll see articles based on your location"
            loadNearbyArticles()
        } else {
            _permissionResultMessage.value = "You won't see location-based articles without permission"
        }
    }

    /**
     * Clear permission result message
     */
    fun clearPermissionResultMessage() {
        _permissionResultMessage.value = null
    }

    /**
     * Set search query and update UI state
     */
    fun onSearchQueryChange(query: String) {
        _searchQuery.value = query
        if (query.isEmpty()) {
            _searchResults.value = emptyList()
            _uiState.value = UiState.Initial
        }
    }

    /**
     * Perform a search for articles
     */
    fun searchArticles() {
        val query = _searchQuery.value
        if (query.isBlank()) return

        viewModelScope.launch {
            _uiState.value = UiState.Loading
            try {
                val results = repository.searchArticles(query)
                _searchResults.value = results
                _uiState.value = if (results.isEmpty()) UiState.NoResults else UiState.Success
            } catch (e: Exception) {
                _uiState.value = UiState.Error(e.message ?: "Unknown error")
            }
        }
    }

    /**
     * Load a specific article by ID
     */
    fun loadArticle(articleId: Int) {
        viewModelScope.launch {
            _uiState.value = UiState.Loading
            try {
                val article = repository.getArticle(articleId)
                _currentArticle.value = article
                _uiState.value = if (article != null) UiState.Success else UiState.Error("Article not found")

                // Generate AI summary if not already available
                if (article != null && article.aiSummary == null) {
                    repository.generateAiSummary(articleId)
                    // Refresh the article to get the summary
                    _currentArticle.value = repository.getArticle(articleId)
                }
            } catch (e: Exception) {
                _uiState.value = UiState.Error(e.message ?: "Unknown error")
            }
        }
    }

    /**
     * Load recent articles
     */
    fun loadRecentArticles(limit: Int = 10) {
        viewModelScope.launch {
            repository.getRecentArticles(limit).collectLatest {
                _recentArticles.value = it
            }
        }
    }

    /**
     * Load favorite articles
     */
    fun loadFavoriteArticles() {
        viewModelScope.launch {
            repository.getFavoriteArticles().collectLatest {
                _favoriteArticles.value = it
            }
        }
    }

    /**
     * Load articles near the user's current location
     */
    fun loadNearbyArticles() {
        viewModelScope.launch {
            try {
                if (!locationService.hasLocationPermission()) {
                    _showLocationPermissionDialog.value = true
                    return@launch
                }

                val location = locationService.getCurrentLocation()
                if (location != null) {
                    val articles = repository.getNearbyArticles(location.latitude, location.longitude)
                    _nearbyArticles.value = articles
                }
            } catch (e: Exception) {
                // Handle location error silently
            }
        }
    }

    /**
     * Toggle favorite status for an article
     */
    fun toggleFavorite(article: WikipediaArticle) {
        viewModelScope.launch {
            val newStatus = !article.isFavorite
            repository.toggleFavorite(article.pageid, newStatus)

            // Update current article if it's the same one
            _currentArticle.value?.let {
                if (it.pageid == article.pageid) {
                    _currentArticle.value = it.copy(isFavorite = newStatus)
                }
            }
        }
    }

    /**
     * Clear search results
     */
    fun clearSearch() {
        _searchQuery.value = ""
        _searchResults.value = emptyList()
        _uiState.value = UiState.Initial
    }

    /**
     * Check if the app has location permission
     * @return true if the app has location permission, false otherwise
     */
    fun hasLocationPermission(): Boolean {
        return locationService.hasLocationPermission()
    }

    /**
     * Cleanup resources when the ViewModel is cleared
     */
    override fun onCleared() {
        super.onCleared()
        locationService.cleanup()
    }

    /**
     * UI state sealed class to represent different states of the UI
     */
    sealed class UiState {
        data object Initial : UiState()
        data object Loading : UiState()
        data object Success : UiState()
        data object NoResults : UiState()
        data class Error(val message: String) : UiState()
    }
}


package com.example.mc_assignment3.ui.viewmodels

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.mc_assignment3.util.ThemeManager
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.launch

/**
 * ViewModel for managing app settings, including theme preferences.
 */
class SettingsViewModel(private val themeManager: ThemeManager) : ViewModel() {

    val isDarkMode: StateFlow<Boolean> = themeManager.isDarkMode
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = false
        )

    /**
     * Set the dark mode preference
     * @param isDark True for dark mode, false for light mode
     */
    fun setDarkMode(isDark: Boolean) {
        viewModelScope.launch {
            themeManager.setDarkMode(isDark)
        }
    }

    /**
     * Toggle between light and dark mode
     */
    fun toggleDarkMode() {
        viewModelScope.launch {
            themeManager.toggleDarkMode()
        }
    }
}


package com.example.mc_assignment3.ui.viewmodels

import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import com.example.mc_assignment3.data.local.WikipediaDatabase
import com.example.mc_assignment3.data.remote.OpenAIClient
import com.example.mc_assignment3.data.repository.WikipediaRepository
import com.example.mc_assignment3.util.LocationService
import com.example.mc_assignment3.util.ThemeManager

/**
 * Factory class for creating ViewModels with dependencies.
 */
class ViewModelFactory(private val context: Context) : ViewModelProvider.Factory {

    // Create OpenAI Client with your API key
    private val openAIClient by lazy {
        // You should store the API key securely, this is just for demonstration
        // In a real app, use BuildConfig or a secure storage solution
        OpenAIClient("YOUR_OPENAI_API_KEY_HERE")
    }

    // Create Wikipedia DAO
    private val wikipediaDao by lazy {
        WikipediaDatabase.getDatabase(context).wikipediaDao()
    }

    // Create repository
    private val wikipediaRepository by lazy {
        WikipediaRepository(wikipediaDao, openAIClient)
    }

    // Create location service
    private val locationService by lazy {
        LocationService(context)
    }

    // Create theme manager
    private val themeManager by lazy {
        ThemeManager(context)
    }

    @Suppress("UNCHECKED_CAST")
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        return when {
            modelClass.isAssignableFrom(HomeViewModel::class.java) -> {
                HomeViewModel(wikipediaRepository, locationService) as T
            }
            modelClass.isAssignableFrom(SettingsViewModel::class.java) -> {
                SettingsViewModel(themeManager) as T
            }
            else -> throw IllegalArgumentException("Unknown ViewModel class: ${modelClass.name}")
        }
    }
}


package com.example.mc_assignment3.util

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.location.Address
import android.location.Geocoder
import android.location.Location
import android.os.Build
import android.util.Log
import androidx.core.content.ContextCompat
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import com.google.android.gms.location.Priority
import com.google.android.gms.tasks.CancellationTokenSource
import kotlinx.coroutines.suspendCancellableCoroutine
import java.io.IOException
import java.util.Locale
import kotlin.coroutines.resume
import kotlin.coroutines.resumeWithException

/**
 * Service to handle location-related operations.
 */
class LocationService(private val context: Context) {

    private val fusedLocationClient: FusedLocationProviderClient =
        LocationServices.getFusedLocationProviderClient(context)

    private val cancellationTokenSource = CancellationTokenSource()

    /**
     * Check if the app has location permissions
     */
    fun hasLocationPermission(): Boolean {
        return ContextCompat.checkSelfPermission(
            context,
            Manifest.permission.ACCESS_FINE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED ||
        ContextCompat.checkSelfPermission(
            context,
            Manifest.permission.ACCESS_COARSE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED
    }

    /**
     * Get the current location as a suspending function
     */
    suspend fun getCurrentLocation(): Location? {
        if (!hasLocationPermission()) {
            return null
        }

        return try {
            suspendCancellableCoroutine { continuation ->
                val priority = Priority.PRIORITY_BALANCED_POWER_ACCURACY

                fusedLocationClient.getCurrentLocation(priority, cancellationTokenSource.token)
                    .addOnSuccessListener { location ->
                        continuation.resume(location)
                    }
                    .addOnFailureListener { exception ->
                        continuation.resumeWithException(exception)
                    }

                continuation.invokeOnCancellation {
                    cancellationTokenSource.cancel()
                }
            }
        } catch (e: Exception) {
            Log.e("LocationService", "Error getting location", e)
            null
        }
    }

    /**
     * Get the address from coordinates using Geocoder
     */
    suspend fun getAddressFromLocation(latitude: Double, longitude: Double): Address? {
        val geocoder = Geocoder(context, Locale.getDefault())

        return try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                var address: Address? = null
                geocoder.getFromLocation(latitude, longitude, 1) { addresses ->
                    if (addresses.isNotEmpty()) {
                        address = addresses[0]
                    }
                }
                address
            } else {
                @Suppress("DEPRECATION")
                val addresses = geocoder.getFromLocation(latitude, longitude, 1)
                addresses?.firstOrNull()
            }
        } catch (e: IOException) {
            Log.e("LocationService", "Error getting address from location", e)
            null
        }
    }

    /**
     * Get keywords related to the current location
     */
    suspend fun getLocationRelatedKeywords(): List<String> {
        val location = getCurrentLocation() ?: return emptyList()
        val address = getAddressFromLocation(location.latitude, location.longitude) ?: return emptyList()

        val keywords = mutableListOf<String>()

        // Add different location attributes as potential keywords
        address.locality?.let { keywords.add(it) } // City
        address.adminArea?.let { keywords.add(it) } // State
        address.countryName?.let { keywords.add(it) } // Country
        address.featureName?.let { keywords.add(it) } // Feature name

        return keywords.distinct()
    }

    fun cleanup() {
        cancellationTokenSource.cancel()
    }
}


package com.example.mc_assignment3.util

import android.content.Context
import androidx.datastore.core.DataStore
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.booleanPreferencesKey
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.preferencesDataStore
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map

/**
 * Manager for handling theme (light/dark mode) preferences.
 */
class ThemeManager(private val context: Context) {

    companion object {
        private val Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = "settings")
        private val IS_DARK_MODE = booleanPreferencesKey("is_dark_mode")
    }

    /**
     * Get the current theme mode preference as a Flow.
     */
    val isDarkMode: Flow<Boolean> = context.dataStore.data
        .map { preferences ->
            preferences[IS_DARK_MODE] ?: false
        }

    /**
     * Update the theme mode preference.
     */
    suspend fun setDarkMode(isDark: Boolean) {
        context.dataStore.edit { preferences ->
            preferences[IS_DARK_MODE] = isDark
        }
    }

    /**
     * Toggle between light and dark mode.
     */
    suspend fun toggleDarkMode() {
        context.dataStore.edit { preferences ->
            val current = preferences[IS_DARK_MODE] ?: false
            preferences[IS_DARK_MODE] = !current
        }
    }
}


package com.example.mc_assignment3.data.local

import androidx.room.TypeConverter
import com.example.mc_assignment3.data.model.Coordinates
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

/**
 * Type converters for Room database to handle complex data types.
 */
class Converters {
    private val gson = Gson()

    @TypeConverter
    fun fromCoordinates(coordinates: Coordinates?): String? {
        return coordinates?.let { gson.toJson(it) }
    }

    @TypeConverter
    fun toCoordinates(json: String?): Coordinates? {
        return json?.let {
            gson.fromJson(it, Coordinates::class.java)
        }
    }

    @TypeConverter
    fun fromStringList(value: List<String>): String {
        return gson.toJson(value)
    }

    @TypeConverter
    fun toStringList(value: String): List<String> {
        val listType = object : TypeToken<List<String>>() {}.type
        return gson.fromJson(value, listType) ?: emptyList()
    }
}


package com.example.mc_assignment3.data.local

import androidx.room.*
import com.example.mc_assignment3.data.model.WikipediaArticle
import kotlinx.coroutines.flow.Flow

/**
 * Data Access Object for the Wikipedia articles table.
 */
@Dao
interface WikipediaDao {

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertArticle(article: WikipediaArticle)

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertArticles(articles: List<WikipediaArticle>)

    @Query("SELECT * FROM articles WHERE pageid = :id")
    suspend fun getArticleById(id: Int): WikipediaArticle?

    @Query("SELECT * FROM articles WHERE title LIKE '%' || :query || '%'")
    fun searchArticlesByTitle(query: String): Flow<List<WikipediaArticle>>

    @Query("SELECT * FROM articles ORDER BY lastAccessed DESC LIMIT :limit")
    fun getRecentArticles(limit: Int = 10): Flow<List<WikipediaArticle>>

    @Query("SELECT * FROM articles WHERE isFavorite = 1 ORDER BY title ASC")
    fun getFavoriteArticles(): Flow<List<WikipediaArticle>>

    @Query("UPDATE articles SET isFavorite = :isFavorite WHERE pageid = :articleId")
    suspend fun updateFavoriteStatus(articleId: Int, isFavorite: Boolean)

    @Query("UPDATE articles SET aiSummary = :summary WHERE pageid = :articleId")
    suspend fun updateAiSummary(articleId: Int, summary: String)

    @Query("DELETE FROM articles WHERE pageid = :articleId")
    suspend fun deleteArticle(articleId: Int)

    @Query("SELECT * FROM articles WHERE coordinates IS NOT NULL")
    fun getArticlesWithLocation(): Flow<List<WikipediaArticle>>

    @Query("SELECT * FROM articles WHERE lastAccessed < :timestamp AND isFavorite = 0")
    suspend fun getOldArticles(timestamp: Long): List<WikipediaArticle>

    @Delete
    suspend fun deleteArticles(articles: List<WikipediaArticle>)
}


package com.example.mc_assignment3.data.local

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import com.example.mc_assignment3.data.model.WikipediaArticle

/**
 * Room database for storing Wikipedia articles locally.
 * This provides offline access to cached articles.
 */
@Database(entities = [WikipediaArticle::class], version = 1, exportSchema = false)
@TypeConverters(Converters::class)
abstract class WikipediaDatabase : RoomDatabase() {

    abstract fun wikipediaDao(): WikipediaDao

    companion object {
        @Volatile
        private var INSTANCE: WikipediaDatabase? = null

        fun getDatabase(context: Context): WikipediaDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    WikipediaDatabase::class.java,
                    "wikipedia_database"
                )
                .fallbackToDestructiveMigration()
                .build()

                INSTANCE = instance
                instance
            }
        }
    }
}


package com.example.mc_assignment3.data.model

import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * Data model representing a Wikipedia article.
 * This model is used both for the Room database (offline caching) and for displaying articles.
 */
@Entity(tableName = "articles")
data class WikipediaArticle(
    @PrimaryKey
    val pageid: Int,
    val title: String,
    val extract: String, // The plain text summary of the article
    val thumbnail: String? = null, // URL to the thumbnail image
    val fullUrl: String, // Full URL to the Wikipedia article
    val lastAccessed: Long = System.currentTimeMillis(), // For tracking recently viewed
    val isFavorite: Boolean = false,
    val aiSummary: String? = null, // AI-generated summary
    val relatedKeywords: List<String> = emptyList(), // For related content suggestions
    val coordinates: Coordinates? = null // Geo coordinates if available
)

/**
 * Coordinates data class for location-based articles
 */
data class Coordinates(
    val lat: Double,
    val lon: Double
)


package com.example.mc_assignment3.data.remote

import com.aallam.openai.api.completion.CompletionRequest
import com.aallam.openai.api.model.ModelId
import com.aallam.openai.client.OpenAI
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

/**
 * Client for interacting with OpenAI API to generate article summaries
 */
class OpenAIClient(private val apiKey: String) {

    private val openAI by lazy { OpenAI(apiKey) }

    /**
     * Generate a concise summary of a Wikipedia article using AI
     * @param articleText The full text of the Wikipedia article
     * @return A concise summary of the article
     */
    suspend fun generateSummary(articleText: String): String = withContext(Dispatchers.IO) {
        try {
            // Truncate article if it's too long to stay within token limits
            val truncatedArticle = if (articleText.length > 3000) {
                articleText.substring(0, 3000)
            } else {
                articleText
            }

            val prompt = "Summarize this Wikipedia article in 3-5 sentences:\n\n$truncatedArticle"

            val completionRequest = CompletionRequest(
                model = ModelId("gpt-3.5-turbo-instruct"),
                prompt = prompt,
                maxTokens = 150,
                temperature = 0.5
            )

            val completion = openAI.completion(completionRequest)
            return@withContext completion.choices[0].text.trim()
        } catch (e: Exception) {
            return@withContext "Unable to generate summary: ${e.message}"
        }
    }
}


package com.example.mc_assignment3.data.remote

import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit

/**
 * Singleton to manage the Retrofit client for Wikipedia API calls.
 */
object WikipediaApiClient {
    private const val BASE_URL = "https://en.wikipedia.org/w/api.php/"

    private val okHttpClient: OkHttpClient by lazy {
        val loggingInterceptor = HttpLoggingInterceptor().apply {
            level = HttpLoggingInterceptor.Level.BODY
        }

        OkHttpClient.Builder()
            .addInterceptor(loggingInterceptor)
            .connectTimeout(15, TimeUnit.SECONDS)
            .readTimeout(15, TimeUnit.SECONDS)
            .build()
    }

    val apiService: WikipediaApiService by lazy {
        Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(okHttpClient)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(WikipediaApiService::class.java)
    }
}


package com.example.mc_assignment3.data.remote

import com.google.gson.annotations.SerializedName

/**
 * Models for the Wikipedia API responses.
 */

// Search response
data class WikipediaSearchResponse(
    val query: SearchQuery
)

data class SearchQuery(
    val search: List<SearchResult>
)

data class SearchResult(
    val pageid: Int,
    val title: String,
    val snippet: String
)

// Article content response
data class WikipediaArticleResponse(
    val query: ArticleQuery
)

data class ArticleQuery(
    val pages: Map<String, ArticlePage>
)

data class ArticlePage(
    val pageid: Int,
    val title: String,
    val extract: String,
    val fullurl: String,
    val thumbnail: ThumbnailInfo? = null,
    val coordinates: List<Coordinate>? = null
)

data class ThumbnailInfo(
    val source: String,
    val width: Int,
    val height: Int
)

data class Coordinate(
    val lat: Double,
    val lon: Double,
    val primary: String
)

// Nearby articles response
data class WikipediaNearbyResponse(
    val query: NearbyQuery
)

data class NearbyQuery(
    @SerializedName("geosearch")
    val geoSearch: List<NearbyArticle>
)

data class NearbyArticle(
    val pageid: Int,
    val title: String,
    val lat: Double,
    val lon: Double,
    val dist: Float // Distance in meters
)



package com.example.mc_assignment3.data.repository

import android.util.Log
import com.example.mc_assignment3.data.local.WikipediaDao
import com.example.mc_assignment3.data.model.Coordinates
import com.example.mc_assignment3.data.model.WikipediaArticle
import com.example.mc_assignment3.data.remote.OpenAIClient
import com.example.mc_assignment3.data.remote.WikipediaApiClient
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.flowOn
import kotlinx.coroutines.withContext
import java.util.concurrent.TimeUnit

/**
 * Repository class that coordinates between local database (offline cache) and remote API.
 */
class WikipediaRepository(
    private val wikipediaDao: WikipediaDao,
    private val openAIClient: OpenAIClient
) {
    private val apiService = WikipediaApiClient.apiService

    /**
     * Search for Wikipedia articles by query.
     * @param query The search query
     * @return List of matching articles
     */
    suspend fun searchArticles(query: String): List<WikipediaArticle> = withContext(Dispatchers.IO) {
        try {
            // First check if we have cached results
            val cachedArticles = wikipediaDao.searchArticlesByTitle(query).flowOn(Dispatchers.IO).first()
            if (cachedArticles.isNotEmpty()) {
                return@withContext cachedArticles
            }

            // If not found locally, fetch from API
            val searchResponse = apiService.searchArticles(searchQuery = query)

            // Convert search results to page IDs for detail fetch
            val pageIds = searchResponse.query.search.map { it.pageid.toString() }.joinToString("|")

            if (pageIds.isNotEmpty()) {
                val articleDetails = apiService.getArticleDetails(pageIds = pageIds)

                // Map API response to our data model and save to database
                val articles = articleDetails.query.pages.map { (_, page) ->
                    WikipediaArticle(
                        pageid = page.pageid,
                        title = page.title,
                        extract = page.extract,
                        thumbnail = page.thumbnail?.source,
                        fullUrl = page.fullurl,
                        coordinates = page.coordinates?.firstOrNull()?.let {
                            Coordinates(it.lat, it.lon)
                        }
                    )
                }

                // Cache results in local database
                wikipediaDao.insertArticles(articles)

                return@withContext articles
            }

            emptyList()
        } catch (e: Exception) {
            Log.e("WikipediaRepository", "Error searching articles", e)
            emptyList()
        }
    }

    /**
     * Get a specific article by ID, either from cache or API.
     */
    suspend fun getArticle(articleId: Int): WikipediaArticle? = withContext(Dispatchers.IO) {
        try {
            // Check local database first
            val localArticle = wikipediaDao.getArticleById(articleId)

            if (localArticle == null) {
                // Fetch from API if not found locally
                val articleDetails = apiService.getArticleDetails(pageIds = articleId.toString())

                val fetchedArticle = articleDetails.query.pages[articleId.toString()]?.let { page ->
                    WikipediaArticle(
                        pageid = page.pageid,
                        title = page.title,
                        extract = page.extract,
                        thumbnail = page.thumbnail?.source,
                        fullUrl = page.fullurl,
                        coordinates = page.coordinates?.firstOrNull()?.let {
                            Coordinates(it.lat, it.lon)
                        }
                    )
                }

                // Cache in local database
                if (fetchedArticle != null) {
                    wikipediaDao.insertArticle(fetchedArticle)
                }

                return@withContext fetchedArticle
            } else {
                // If found locally, update the last accessed time
                val updatedArticle = localArticle.copy(lastAccessed = System.currentTimeMillis())
                wikipediaDao.insertArticle(updatedArticle)
                return@withContext updatedArticle
            }
        } catch (e: Exception) {
            Log.e("WikipediaRepository", "Error getting article", e)
            null
        }
    }

    /**
     * Get recently viewed articles.
     */
    fun getRecentArticles(limit: Int = 10): Flow<List<WikipediaArticle>> {
        return wikipediaDao.getRecentArticles(limit).flowOn(Dispatchers.IO)
    }

    /**
     * Get favorite articles.
     */
    fun getFavoriteArticles(): Flow<List<WikipediaArticle>> {
        return wikipediaDao.getFavoriteArticles().flowOn(Dispatchers.IO)
    }

    /**
     * Toggle favorite status for an article.
     */
    suspend fun toggleFavorite(articleId: Int, isFavorite: Boolean) = withContext(Dispatchers.IO) {
        wikipediaDao.updateFavoriteStatus(articleId, isFavorite)
    }

    /**
     * Generate an AI summary for an article.
     */
    suspend fun generateAiSummary(articleId: Int) = withContext(Dispatchers.IO) {
        try {
            val article = wikipediaDao.getArticleById(articleId) ?: return@withContext

            if (article.aiSummary == null) {
                val summary = openAIClient.generateSummary(article.extract)
                wikipediaDao.updateAiSummary(articleId, summary)
            }
        } catch (e: Exception) {
            Log.e("WikipediaRepository", "Error generating AI summary", e)
        }
    }

    /**
     * Get articles near a location.
     */
    suspend fun getNearbyArticles(latitude: Double, longitude: Double): List<WikipediaArticle> = withContext(Dispatchers.IO) {
        try {
            val coordinates = "$latitude|$longitude"
            // Add logging for debugging
            Log.d("WikipediaRepository", "Fetching nearby articles for coordinates: $coordinates")

            val nearbyResponse = apiService.getNearbyArticles(coordinates = coordinates)

            if (nearbyResponse.query.geoSearch.isEmpty()) {
                Log.w("WikipediaRepository", "No nearby articles found for coordinates: $coordinates")
                return@withContext emptyList()
            }

            val pageIds = nearbyResponse.query.geoSearch.map { it.pageid.toString() }.joinToString("|")
            Log.d("WikipediaRepository", "Found ${nearbyResponse.query.geoSearch.size} nearby articles")

            if (pageIds.isNotEmpty()) {
                val articleDetails = apiService.getArticleDetails(pageIds = pageIds)

                val articles = articleDetails.query.pages.map { (_, page) ->
                    WikipediaArticle(
                        pageid = page.pageid,
                        title = page.title,
                        extract = page.extract,
                        thumbnail = page.thumbnail?.source,
                        fullUrl = page.fullurl,
                        coordinates = page.coordinates?.firstOrNull()?.let {
                            Coordinates(it.lat, it.lon)
                        }
                    )
                }

                // Cache results
                wikipediaDao.insertArticles(articles)

                return@withContext articles
            }

            emptyList()
        } catch (e: Exception) {
            Log.e("WikipediaRepository", "Error getting nearby articles", e)
            // Return empty list instead of throwing exception
            emptyList()
        }
    }

    /**
     * Clean up old cached articles that haven't been accessed recently.
     * This helps manage the cache size.
     */
    suspend fun cleanupOldArticles() = withContext(Dispatchers.IO) {
        try {
            // Delete articles older than 30 days that aren't favorites
            val thirtyDaysAgo = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(30)
            val oldArticles = wikipediaDao.getOldArticles(thirtyDaysAgo)
            if (oldArticles.isNotEmpty()) {
                wikipediaDao.deleteArticles(oldArticles)
            }
        } catch (e: Exception) {
            Log.e("WikipediaRepository", "Error cleaning up old articles", e)
        }
    }
}


package com.example.mc_assignment3.data.remote

import com.aallam.openai.api.completion.CompletionRequest
import com.aallam.openai.api.model.ModelId
import com.aallam.openai.client.OpenAI
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

/**
 * Client for interacting with OpenAI API to generate article summaries
 */
class OpenAIClient(private val apiKey: String) {

    private val openAI by lazy { OpenAI(apiKey) }

    /**
     * Generate a concise summary of a Wikipedia article using AI
     * @param articleText The full text of the Wikipedia article
     * @return A concise summary of the article
     */
    suspend fun generateSummary(articleText: String): String = withContext(Dispatchers.IO) {
        try {
            // Truncate article if it's too long to stay within token limits
            val truncatedArticle = if (articleText.length > 3000) {
                articleText.substring(0, 3000)
            } else {
                articleText
            }

            val prompt = "Summarize this Wikipedia article in 3-5 sentences:\n\n$truncatedArticle"

            val completionRequest = CompletionRequest(
                model = ModelId("gpt-3.5-turbo-instruct"),
                prompt = prompt,
                maxTokens = 150,
                temperature = 0.5
            )

            val completion = openAI.completion(completionRequest)
            return@withContext completion.choices[0].text.trim()
        } catch (e: Exception) {
            return@withContext "Unable to generate summary: ${e.message}"
        }
    }
}


package com.example.mc_assignment3.data.remote

import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit

/**
 * Singleton to manage the Retrofit client for Wikipedia API calls.
 */
object WikipediaApiClient {
    private const val BASE_URL = "https://en.wikipedia.org/w/api.php/"

    private val okHttpClient: OkHttpClient by lazy {
        val loggingInterceptor = HttpLoggingInterceptor().apply {
            level = HttpLoggingInterceptor.Level.BODY
        }

        OkHttpClient.Builder()
            .addInterceptor(loggingInterceptor)
            .connectTimeout(15, TimeUnit.SECONDS)
            .readTimeout(15, TimeUnit.SECONDS)
            .build()
    }

    val apiService: WikipediaApiService by lazy {
        Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(okHttpClient)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(WikipediaApiService::class.java)
    }
}


package com.example.mc_assignment3.data.remote

import com.google.gson.annotations.SerializedName

/**
 * Models for the Wikipedia API responses.
 */

// Search response
data class WikipediaSearchResponse(
    val query: SearchQuery
)

data class SearchQuery(
    val search: List<SearchResult>
)

data class SearchResult(
    val pageid: Int,
    val title: String,
    val snippet: String
)

// Article content response
data class WikipediaArticleResponse(
    val query: ArticleQuery
)

data class ArticleQuery(
    val pages: Map<String, ArticlePage>
)

data class ArticlePage(
    val pageid: Int,
    val title: String,
    val extract: String,
    val fullurl: String,
    val thumbnail: ThumbnailInfo? = null,
    val coordinates: List<Coordinate>? = null
)

data class ThumbnailInfo(
    val source: String,
    val width: Int,
    val height: Int
)

data class Coordinate(
    val lat: Double,
    val lon: Double,
    val primary: String
)

// Nearby articles response
data class WikipediaNearbyResponse(
    val query: NearbyQuery
)

data class NearbyQuery(
    @SerializedName("geosearch")
    val geoSearch: List<NearbyArticle>
)

data class NearbyArticle(
    val pageid: Int,
    val title: String,
    val lat: Double,
    val lon: Double,
    val dist: Float // Distance in meters
)



package com.example.mc_assignment3.data.remote

import retrofit2.http.GET
import retrofit2.http.Query

/**
 * Retrofit service interface for the Wikipedia API.
 */
interface WikipediaApiService {

    /**
     * Search for Wikipedia articles.
     */
    @GET("w/api.php")
    suspend fun searchArticles(
        @Query("action") action: String = "query",
        @Query("format") format: String = "json",
        @Query("list") list: String = "search",
        @Query("srsearch") searchQuery: String,
        @Query("srlimit") limit: Int = 20,
        @Query("utf8") utf8: Int = 1
    ): WikipediaSearchResponse

    /**
     * Get detailed information about specific articles.
     */
    @GET("w/api.php")
    suspend fun getArticleDetails(
        @Query("action") action: String = "query",
        @Query("format") format: String = "json",
        @Query("prop") properties: String = "extracts|pageimages|coordinates|info",
        @Query("pageids") pageIds: String,
        @Query("explaintext") plainText: Int = 1,
        @Query("exsectionformat") sectionFormat: String = "plain",
        @Query("exintro") introOnly: Int = 0,
        @Query("piprop") imageProperties: String = "thumbnail",
        @Query("pithumbsize") thumbSize: Int = 300,
        @Query("inprop") infoProperties: String = "url",
        @Query("utf8") utf8: Int = 1
    ): WikipediaArticleResponse

    /**
     * Get articles near a location.
     */
    @GET("w/api.php")
    suspend fun getNearbyArticles(
        @Query("action") action: String = "query",
        @Query("format") format: String = "json",
        @Query("list") list: String = "geosearch",
        @Query("gscoord") coordinates: String, // Format: "latitude|longitude"
        @Query("gsradius") radiusInMeters: Int = 10000,
        @Query("gslimit") limit: Int = 20,
        @Query("utf8") utf8: Int = 1
    ): WikipediaNearbyResponse
}


